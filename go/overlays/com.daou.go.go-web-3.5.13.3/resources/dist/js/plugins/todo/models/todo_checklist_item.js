define("todo/models/todo_checklist_item",["when","todo/models/base","todo/libs/util"],function(e,t,n){var r;return r=t.Model.extend({todoChecklistModel:null,defaults:{seq:0},urlRoot:function(){return[_.result(this.todoChecklistModel,"urlRoot"),this.todoChecklistModel.id,"item"].join("/")},updateTitle:function(e){return n.promiseModelSave(this,{title:e})},toggle:function(){var e=this.isChecked()?"N":"Y";return n.promiseModelSave(this,{checkFlag:e})},remove:function(){var t=e.defer();return this.destroy({success:t.resolve,error:function(e,n,r){t.reject(n)}}),t.promise},move:function(e,t){return n.promiseAsync([_.result(this,"urlRoot"),this.id,"move"].join("/"),{type:"PUT",data:{checklistId:e,seq:t}})},isChecked:function(){return this.get("checkFlag")==="Y"}},{newFromChecklist:function(e,t){var n;return n=new r(_.extend(t,{checklistId:e.id})),n.todoChecklistModel=e,n},createFromChecklist:function(t,n){var r=this.newFromChecklist(t,{title:n,seq:t.getNextItemSeq()}),i=e.defer();return r.save(null,{success:i.resolve,error:function(e,t,n){t.responseJSON.code==404&&t.responseJSON.name=="todo.not.found.element"&&$.goSlideMessage(t.responseJSON.message,"caution"),i.reject(t)}}),i.promise}}),r});